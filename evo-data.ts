// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class EvoData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EvoData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

level():number {
  return this.bb!.readUint16(this.bb_pos);
}

method():number {
  return this.bb!.readUint16(this.bb_pos + 2);
}

arg():number {
  return this.bb!.readUint16(this.bb_pos + 4);
}

res0():number {
  return this.bb!.readUint16(this.bb_pos + 6);
}

res1():number {
  return this.bb!.readUint16(this.bb_pos + 8);
}

res2():number {
  return this.bb!.readUint16(this.bb_pos + 10);
}

species():number {
  return this.bb!.readUint16(this.bb_pos + 12);
}

form():number {
  return this.bb!.readUint16(this.bb_pos + 14);
}

static sizeOf():number {
  return 16;
}

static createEvoData(builder:flatbuffers.Builder, level: number, method: number, arg: number, res0: number, res1: number, res2: number, species: number, form: number):flatbuffers.Offset {
  builder.prep(2, 16);
  builder.writeInt16(form);
  builder.writeInt16(species);
  builder.writeInt16(res2);
  builder.writeInt16(res1);
  builder.writeInt16(res0);
  builder.writeInt16(arg);
  builder.writeInt16(method);
  builder.writeInt16(level);
  return builder.offset();
}

}
