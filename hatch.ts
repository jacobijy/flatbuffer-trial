// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Hatch {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Hatch {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

species():number {
  return this.bb!.readUint16(this.bb_pos);
}

form():number {
  return this.bb!.readUint16(this.bb_pos + 2);
}

region():number {
  return this.bb!.readUint16(this.bb_pos + 4);
}

canEvolve():number {
  return this.bb!.readUint16(this.bb_pos + 6);
}

static sizeOf():number {
  return 8;
}

static createHatch(builder:flatbuffers.Builder, species: number, form: number, region: number, can_evolve: number):flatbuffers.Offset {
  builder.prep(2, 8);
  builder.writeInt16(can_evolve);
  builder.writeInt16(region);
  builder.writeInt16(form);
  builder.writeInt16(species);
  return builder.offset();
}

}
