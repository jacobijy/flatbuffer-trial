// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class SpeciesInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpeciesInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

speciesIndex():number {
  return this.bb!.readUint16(this.bb_pos);
}

speciesForm():number {
  return this.bb!.readUint16(this.bb_pos + 2);
}

speciesModel():number {
  return this.bb!.readUint16(this.bb_pos + 4);
}

color():number {
  return this.bb!.readUint8(this.bb_pos + 6);
}

bodytype():number {
  return this.bb!.readUint8(this.bb_pos + 7);
}

height():number {
  return this.bb!.readUint16(this.bb_pos + 8);
}

weight():number {
  return this.bb!.readUint16(this.bb_pos + 10);
}

res0():number {
  return this.bb!.readUint32(this.bb_pos + 12);
}

res1():number {
  return this.bb!.readUint32(this.bb_pos + 16);
}

res2():number {
  return this.bb!.readUint32(this.bb_pos + 20);
}

static sizeOf():number {
  return 24;
}

static createSpeciesInfo(builder:flatbuffers.Builder, species_index: number, species_form: number, species_model: number, color: number, bodytype: number, height: number, weight: number, res0: number, res1: number, res2: number):flatbuffers.Offset {
  builder.prep(4, 24);
  builder.writeInt32(res2);
  builder.writeInt32(res1);
  builder.writeInt32(res0);
  builder.writeInt16(weight);
  builder.writeInt16(height);
  builder.writeInt8(bodytype);
  builder.writeInt8(color);
  builder.writeInt16(species_model);
  builder.writeInt16(species_form);
  builder.writeInt16(species_index);
  return builder.offset();
}

}
